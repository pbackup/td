<?php

namespace Tdom\MessageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{

    /**
     * Find TotalUnreadUserMessage
     *
     * @param $sourceUserId
     * @param $targetUserId
     * @return mixed
     */
    public function findTotalUnreadUserMessage($sourceUserId, $targetUserId) {
        $qb = $this->makeQueryBuilder($sourceUserId, $targetUserId);
        return $qb->select('count(m.id)')
            ->getQuery()->getSingleScalarResult();
    }

    /**
     * Make a Query Builder
     *
     * @param $sourceUserId
     * @param $targetUserId
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function makeQueryBuilder($sourceUserId, $targetUserId) {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('m')
            ->from('TdomMessageBundle:Message','m')
            ->innerJoin('m.userMessages', 'um')
            ->where('(um.sourceUser = :sourceUser and um.targetUser = :targetUser)
                  or (um.sourceUser = :targetUser and um.targetUser = :sourceUser)')
            ->setParameter('sourceUser', $sourceUserId)->setParameter('targetUser', $targetUserId)
            ->andWhere('m.isDeleted = :isDeleted')->setParameter('isDeleted' , false)
            ->andWhere('m.isRead = :isRead')->setParameter('isRead' , false)
            ->andWhere('m.user = :userId')->setParameter('userId', $targetUserId);
    }

    /**
     * Find User message
     *
     * @param $sourceUserId
     * @param $targetUserId
     */
    public function makeUnreadToRead($sourceUserId, $targetUserId) {
        $qb = $this->makeQueryBuilder($sourceUserId, $targetUserId);
        $messages = $qb->getQuery()->getResult();

        foreach ($messages as $message) {
            $message->setIsRead(true);
            $this->getEntityManager()->persist($message);
        }
        $this->getEntityManager()->flush();
    }
}
