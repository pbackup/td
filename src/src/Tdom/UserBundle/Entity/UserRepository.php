<?php

namespace Tdom\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{

    /**
     * Find User based on games and category filter
     *
     * @param array $games
     * @param $categoryId
     * @return array
     */
    public function findUsersByGamesAndCategory(array $games, $categoryId = 0) {

        $qb = $this->createQueryBuilder('u')
                   ->innerJoin('u.games', 'g')
                   ->innerJoin('g.category', 'c')
                   ->where('g.isActive = :isActive')->setParameter('isActive', true)
                   ->andWhere ('g.isDeleted = :isDeleted')->setParameter('isDeleted', false);

        if ($games)
           $qb->andWhere('g.id IN (:games)')->setParameter('games', $games);

        if ($categoryId)
           $qb->andWhere('c.id = :categoryId')->setParameter('categoryId', $categoryId);

        $qb->andWhere('u.enabled = :enabled')->setParameter('enabled',true);

        return $qb->getQuery()->getResult();
    }

    /**
     * Find User based on user connect
     *
     * @param int $ownUserId
     * @param string $filterText
     * @return array
     */
    public function findUsersBasedOnUserConnect($ownUserId, $filterText = "") {

        $qb = $this->createQueryBuilder('u')
            ->from('Tdom\UserBundle\Entity\UserConnect', 'uc')
            ->leftJoin('u.userMessages', 'um')
            ->where('u.id = uc.sourceUser or u.id = uc.targetUser')
            ->andWhere('uc.sourceUser = :userId or uc.targetUser = :userId')
            ->andWhere('u.id != :userId')->setParameter('userId', $ownUserId);

        if ($filterText) {
            $qb->andWhere('u.nickName LIKE :nickName')->setParameter('nickName',  $filterText."%");
        }

        $qb->orderBy('um.id', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Find all users
     *
     * @param array $exceptUsers
     * @param string $filterText
     * @return array
     */
    public function findUsers($exceptUsers = array(), $filterText = "") {
        $qb = $this->createQueryBuilder('u')
            ->where('u.enabled = :isEnabled')->setParameter('isEnabled', true)
            ->andWhere('u.id NOT IN (:users)')->setParameter('users', $exceptUsers);
        if ($filterText) {
            $qb->andWhere('u.nickName LIKE :nickName')->setParameter('nickName',  $filterText."%");
        }
        $qb->orderBy('u.nickName', 'ASC');

        return $qb->getQuery()->getResult();
    }
}
